cmake_minimum_required(VERSION 3.8)
project(pkg1)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(cv_bridge REQUIRED)
find_package(image_transport REQUIRED)
find_package(sensor_msgs REQUIRED)

# Specify the paths for Hikvision API and camera libraries
find_library(HIKVISION_API_LIBRARY hikvision_api PATHS /usr/local/lib)
find_library(MVCAMERA_LIBRARY MvCameraControl PATHS $ENV{MVCAM_COMMON_RUNENV}/64)


# Include directories for Hikvision API and other dependencies
include_directories(
  /usr/local/include
  ./include/hikvision
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

# Declare the executable
# add_executable(image_publisher src/image_publisher.cpp src/utils.cpp)

# # Use ament_target_dependencies to link dependencies
# ament_target_dependencies(image_publisher
#   rclcpp
#   cv_bridge
#   image_transport
#   sensor_msgs
#   std_msgs
# )



add_executable(sensors src/nodes.cpp src/image_publisher.cpp src/utils.cpp)
ament_target_dependencies(sensors 
rclcpp 
std_msgs
cv_bridge
image_transport
sensor_msgs
)

# Manually link additional libraries
target_link_libraries(sensors
  ${HIKVISION_API_LIBRARY}
  ${MVCAMERA_LIBRARY}
  pthread
)


# Install the executable
install(TARGETS sensors
  DESTINATION lib/${PROJECT_NAME}
)
install(DIRECTORY launch
  DESTINATION share/${PROJECT_NAME})

ament_package()
